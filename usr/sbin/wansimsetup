#!/bin/bash
############################################################
#
# WANsim Setup v2.0.1 by Ferry Hendrikx, (c) 2008-2013
#
############################################################

PATH=/sbin:/bin:/usr/sbin:/usr/bin

# utils

PROG_BR=`which brctl`
PROG_IF=`which ifconfig`
PROG_TC=`which tc`


# where to find my configuration file

WANSIMCONF="/var/lib/wansim/wansim.conf"
WANSIMVERS="v2.0.1"


# make burstable bucket larger than normal

BURST_HACK=1


############################################################
# functions
############################################################

show_scrn()
{
    clear
    echo "############################################################"
}

show_list()
{
    for str in "$@"; do
        echo "# $str";
    done
}

show_page()
{
    show_scrn

    for str in "$@"; do
        echo "# $str";
    done

    echo "############################################################"
}

show_diag()
{
    str=$1

    echo ""
    echo -n "$str "
}

user_read()
{
    local val
    read val

    [ -n "$val" ] && eval $1=\$val
}

user_wait()
{
    echo ""
    echo "$1"

    read
}

do_sanity_check()
{
    if [ -z ${PROG_BR} ]; then
        show_page \
            "Warning: brctl is missing" \
            "" \
            "WANsim will not work as expected" \
            "" \
            "Please install the bridge-utils package"

        user_wait "Press any key"
    fi

    if [ -z ${PROG_IF} ]; then
        show_page \
            "Warning: ifconfig is missing" \
            "" \
            "WANsim will not work as expected" \
            "" \
            "Please ensure that networking is installed on this server"

        user_wait "Press any key"
    fi

    if [ -z ${PROG_TC} ]; then
        show_page \
            "Warning: tc is missing" \
            "" \
            "WANsim will not work as expected" \
            "" \
            "Please install the iproute or iproute2 package"

        user_wait "Press any key"
    fi
}

do_conf_load()
{
    if [ -e "${WANSIMCONF}" ]; then
        . ${WANSIMCONF}
    else
        # set some default values

        TYPE=bridge
        VERBOSE=no
        IFACE0=eth0
        IFACE1=eth1
        IPF=yes
        AFFECT=both
        BRIDGE=br0
        BRIDGEIP=0.0.0.0
        BRIDGEGW=0.0.0.0
        BRIDGEMASK=255.255.255.0
        MTUSIZE=1500
        BANDWIDTH=3072
        BURST=4500
        LATENCY=15
        VARIATION=1
        PKTLOSS=0
        PKTLOSSCOR=0
        PKTDUPL=0
        PKTDUPLCOR=0
        PKTCORR=0
        PKTCORRCOR=0
        PKTORDR=0
        PKTORDRCOR=0
    fi
}

do_conf_save()
{
    rm -f ${WANSIMCONF}

    if [ $? -eq 0 ]; then
        touch ${WANSIMCONF}

        echo "TYPE=${TYPE}" >> ${WANSIMCONF}
        echo "VERBOSE=${VERBOSE}" >> ${WANSIMCONF}
        echo "IFACE0=${IFACE0}" >> ${WANSIMCONF}
        echo "IFACE1=${IFACE1}" >> ${WANSIMCONF}
        echo "IPF=${IPF}" >> ${WANSIMCONF}
        echo "AFFECT=${AFFECT}" >> ${WANSIMCONF}
        echo "BRIDGE=${BRIDGE}" >> ${WANSIMCONF}
        echo "BRIDGEIP=${BRIDGEIP}" >> ${WANSIMCONF}
        echo "BRIDGEGW=${BRIDGEGW}" >> ${WANSIMCONF}
        echo "BRIDGEMASK=${BRIDGEMASK}" >> ${WANSIMCONF}
        echo "MTUSIZE=${MTUSIZE}" >> ${WANSIMCONF}
        echo "BANDWIDTH=${BANDWIDTH}" >> ${WANSIMCONF}
        echo "BURST=${BURST}" >> ${WANSIMCONF}
        echo "LATENCY=${LATENCY}" >> ${WANSIMCONF}
        echo "VARIATION=${VARIATION}" >> ${WANSIMCONF}
        echo "PKTLOSS=${PKTLOSS}" >> ${WANSIMCONF}
        echo "PKTLOSSCOR=${PKTLOSSCOR}" >> ${WANSIMCONF}
        echo "PKTDUPL=${PKTDUPL}" >> ${WANSIMCONF}
        echo "PKTDUPLCOR=${PKTDUPLCOR}" >> ${WANSIMCONF}
        echo "PKTCORR=${PKTCORR}" >> ${WANSIMCONF}
        echo "PKTCORRCOR=${PKTCORRCOR}" >> ${WANSIMCONF}
        echo "PKTORDR=${PKTORDR}" >> ${WANSIMCONF}
        echo "PKTORDRCOR=${PKTORDRCOR}" >> ${WANSIMCONF}

        # dialogue
        show_page "Configuration saved"
    else
        # dialogue
        show_page \
                "Configuration was not saved" \
                "" \
                "Please check that WANsim has write permissions to ${WANSIMCONF}" \
                ""
    fi

    user_wait "Press any key"
}

do_set_type()
{
    if [ $TYPE == "bridge" ]; then
        TYPE="router"
        AFFECT=$IFACE0
    else
        TYPE="bridge"
        AFFECT="both"
    fi
}

do_set_verbose()
{
    if [ $VERBOSE == "yes" ]; then
        VERBOSE="no"
    else
        VERBOSE="yes"
    fi
}

do_set_interface()
{
    show_page "Interface (device name)"
    show_diag ">"
    user_read temp

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    fi
}

do_set_address()
{
    temp=

    # dialogue
    show_page "Bridge IP Address"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$BRIDGEIP
    fi
}

do_set_gateway()
{
    temp=

    # dialogue
    show_page "Bridge Default Gateway (IP address)"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$BRIDGEGW
    fi
}

do_set_mask()
{
    temp=

    # dialogue
    show_page "Bridge Mask"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$BRIDGEMASK
    fi
}

do_set_affected()
{
    if   [ $AFFECT == "both"  ]; then
        AFFECT=$IFACE0
    elif [ $AFFECT == $IFACE0 ]; then
        AFFECT=$IFACE1
    else
        AFFECT="both"
    fi
}

do_set_ipf()
{
    if [ $IPF == "yes" ]; then
        IPF="no"
    else
        IPF="yes"
    fi
}

do_set_mtusize()
{
    temp=

    # dialogue
    show_page "MTU size (bytes)"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:punct:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$MTUSIZE
    fi
}

do_set_bandwidth()
{
    temp=

    # dialogue
    show_page "Bandwidth (kbit/s)"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:punct:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$BANDWIDTH
    fi
}

do_set_burst()
{
    # bandwidth in byte/s = kbit/s * 1000 / 8
    # divide by clockspeed (Hz)
    let "buff=($BANDWIDTH * 125) / 100"

    # ensure burst is always a multiple of MTU size
    let "temp=$buff % $MTUSIZE"
    if [ "$temp" -gt 0 ]; then
        let "buff=$buff + ($MTUSIZE - $temp)"
    fi

    # ensure burst is atleast MTU size
    if [ "$buff" -lt "$MTUSIZE" ]; then
        buff=$MTUSIZE
    fi

    # burst size hack
    if [ "$BURST_HACK" -eq 1 ]; then
        # this hack proved somewhat useful during my
        # testing, so going to leave it in for now.

        let "buff=$buff * 8"
    fi

    eval $1=\$buff
}

do_set_latency()
{
    temp=

    # dialogue
    show_page "Latency (ms)" "Latency is applied to both interfaces" "The actual latency (or RTT) is double this value"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:punct:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$LATENCY
    fi
}

do_set_variation()
{
    temp=

    # recommendation
    let "recc=$LATENCY / 10"
    if [ "$recc" -gt 1 ]; then
        let "recc=$recc - 1"
    fi

    # dialogue
    show_page "Variation (ms)" "(Recommended maximum variation of $recc ms)"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:punct:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$VARIATION
    fi
}

do_set_packet_loss()
{
    temp=

    # dialogue
    show_page "Packet Loss %" "(Minimum percentage is 0.0000001)" "Packet Loss is applied to both interfaces" "The actual rate of loss is double this value"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$PKTLOSS
    fi
}

do_set_packet_loss_correlation()
{
    temp=

    # dialogue
    show_text "Packet Loss Correlation %" "(Minimum percentage is 1)" "Packet Loss Correlation is applied to both interfaces" "This will set the successive probability after a packet loss"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$PKTLOSSCOR
    fi
}

do_set_packet_duplication()
{
    temp=

    # dialogue
    show_page "Packet Duplication %" "(Minimum percentage is 0.0000001)" "Packet Duplication is applied to both interfaces" "The actual rate of duplication is double this value"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$PKTDUPL
    fi
}

do_set_packet_duplication_correlation()
{
    temp=

    # dialogue
    show_text "Packet Duplication Correlation %" "(Minimum percentage is 1)" "Packet Duplication Correlation is applied to both interfaces" "This will set the successive probability after a duplicate packet"
    show_diag ">"
    user_read temp
    
    temp=`echo $temp | tr -d '[:alpha:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$PKTDUPLCOR
    fi
}

do_set_packet_corruption()
{
    temp=

    # dialogue
    show_page "Packet Corruption %" "(Minimum percentage is 0.0000001)" "Packet Corruption is applied to both interfaces" "The actual rate of corruption is double this value"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$PKTCORR
    fi
}

do_set_packet_corruption_correlation()
{
    temp=

    # dialogue
    show_text "Packet Corruption Correlation %" "(Minimum percentage is 1)" "Packet Corruption Correlation is applied to both interfaces" "This will set the successive probability after a corrupt packet"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$PKTCORRCOR
    fi
}

do_set_packet_reorder()
{
    temp=

    # dialogue
    show_text "Packet Re-Order %" "(Minimum percentage is 0.0000001)" "Packet Re-Order is applied to both interfaces" "The actual rate of reordering is double this value"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$PKTORDR
    fi
}

do_set_packet_reorder_correlation()
{
    temp=

    # dialogue
    show_text "Packet Re-Order Correlation %" "(Minimum percentage is 1)" "Packet Re-Order Correlation is applied to both interfaces" "This will set the successive probability after a reordered packet"
    show_diag ">"
    user_read temp

    temp=`echo $temp | tr -d '[:alpha:][:space:][:cntrl:]'`

    if [ ! -z "$temp" ]; then
        eval $1=\$temp
    else
        eval $1=\$PKTORDRCOR
    fi
}


do_restart()
{
    UTIL="/usr/sbin/invoke-rc.d"

    if [ -e ${UTIL} ]; then
        show_page \
            "" \
            "Restarting WANsim" \
            ""

        sudo $UTIL wansim restart
    else
        show_page \
            "" \
            "Unable to restart the init.d script. ${UTIL} not found." \
            ""
    fi

    user_wait "Press any key"
}

do_about()
{
    show_page \
        "" \
        "WANsim ${WANSIMVERS} by Ferry Hendrikx (c) 2008-2011" \
        "" \
        "http://wansim.googlecode.com/" \
        "" \
        "Bridge mode:" \
        "Please note that as some values (e.g. latency) are applied" \
        "to both interfaces, the actual value is in fact double the" \
        "value that you have requested." \
        "" \
        "Router mode:" \
        "Please note that all values are applied only to the router" \
        "interface." \
        ""

    user_wait "Press any key"
}

do_information()
{
    done=0

    while [ $done -eq 0 ]; do
        show_page "WAN Information" "(Press q and then enter to quit)"

        echo ""
        echo "---------- ${IFACE0} ----------"
        $PROG_IF ${IFACE0} | grep bytes | sed -e 's/^[ ]*//'
        $PROG_TC -s qdisc ls dev ${IFACE0}

        echo ""
        echo "---------- ${IFACE1} ----------"
        $PROG_IF ${IFACE1} | grep bytes | sed -e 's/^[ ]*//'
        $PROG_TC -s qdisc ls dev ${IFACE1}

        # key pressed?

        temp=
        read -t 8 temp
        if [ ! -z "$temp" ]; then
            done=1
        fi
    done
}


############################################################
# main
############################################################

# start

do_conf_load
do_sanity_check


# main menu

quit=0

while [ $quit -eq 0 ]; do
    show_scrn

    show_list \
        "(t) Type of system ($TYPE)" \
        "(V) Verbose ($VERBOSE)" \
        "(0) Interface 0 ($IFACE0)" \
        "(1) Interface 1 ($IFACE1)"

    if [ $TYPE == "bridge" ]; then
        show_list \
            "(2) Bridge Interface ($BRIDGE)" \
            "(3) Bridge IP Address ($BRIDGEIP)" \
            "(4) Bridge Default Gateway ($BRIDGEGW)" \
            "(5) Bridge Mask ($BRIDGEMASK)"
    else
        show_list \
            "(w) Router Interface ($AFFECT)" \
            "(f) Router IP forwarding ($IPF)"
    fi

    show_list \
        "(m) MTU Size ($MTUSIZE bytes)" \
        "(b) WAN Bandwidth ($BANDWIDTH kbit/s)" \
        "(l) WAN Latency ($LATENCY ms)" \
        "(v) WAN Variation ($VARIATION ms)" \
        "(L) WAN Packet Loss ($PKTLOSS %)" \
        "(D) WAN Packet Duplication ($PKTDUPL %)" \
        "(C) WAN Packet Corruption ($PKTCORR %)" \
        "(O) WAN Packet Re-Order ($PKTORDR %)" \
        "(K) WAN Packet Loss Correlation ($PKTLOSSCOR %)" \
        "(S) WAN Packet Duplication Correlation ($PKTDUPLCOR %)" \
        "(F) WAN Packet Corruption Correlation ($PKTCORRCOR %)" \
        "(I) WAN Packet Re-Order Correlation ($PKTORDRCOR %)" \
        "(i) WAN Information" \
        "(d) WANsim Configuration Load" \
        "(s) WANsim Configuration Save" \
        "(r) WANsim Restart" \
        "(a) WANsim About" \
        "(q) Quit / Logout"

    show_diag "Option?"
    opt=
    user_read opt

    case "$opt" in
        t)
            do_set_type
        ;;
        V)
            do_set_verbose
        ;;
        0)
            do_set_interface IFACE0
        ;;
        1)
            do_set_interface IFACE1
        ;;
        2)
            do_set_interface BRIDGE
        ;;
        3)
            do_set_address BRIDGEIP
        ;;
        4)
            do_set_gateway BRIDGEGW
        ;;
        5)
            do_set_mask BRIDGEMASK
        ;;
        w)
            do_set_affected
        ;;
        f)
            do_set_ipf
        ;;
        m|M)
            do_set_mtusize MTUSIZE
            do_set_burst BURST
        ;;
        b)
            do_set_bandwidth BANDWIDTH
            do_set_burst BURST
        ;;
        l)
            do_set_latency LATENCY
            do_set_variation VARIATION
        ;;
        v)
            do_set_variation VARIATION
        ;;
        L)
            do_set_packet_loss PKTLOSS
        ;;
        D)
            do_set_packet_duplication PKTDUPL
        ;;
        C)
            do_set_packet_corruption PKTCORR
        ;;
        O)
            do_set_packet_reorder PKTORDR
        ;;
        K)
            do_set_packet_loss_correlation PKTLOSSCOR
        ;;
        S)
            do_set_packet_duplication_correlation PKTDUPLCOR
        ;;
        F)
            do_set_packet_corruption_correlation PKTCORRCOR
        ;;
        I)
            do_set_packet_reorder_correlation PKTORDRCOR
        ;;
        i)
            do_information
        ;;
        d)
            do_conf_load
        ;;
        s|w)
            do_set_burst BURST
            do_conf_save
        ;;
        r|R)
            do_restart
        ;;
        a|A)
            do_about
        ;;
        q|Q|x|X)
            quit=1
        ;;
        *)
        ;;
    esac
done

exit 0
